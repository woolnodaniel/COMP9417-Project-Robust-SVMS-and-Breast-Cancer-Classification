{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Different SVM Models\n",
    "\n",
    "This live script is intended as supplementary material for section 3 of the report. For this live script, we will create a small dataset on which to test our Support Vector Machine models, and compare our four methods on this small dataset. In order to run this script, you will need to have installed:\n",
    " - MATLAB installed locally, as well as all packages needed to run the MATLAB kernel in jupyter (for installation reference, see [this website](https://walczak.org/2017/07/using-matlab-in-jupyter-notebooks-on-windows/)). \n",
    " - Both the MOSEK optimisation package for MATLAB, as well as the YALMIP interface. \n",
    "For full details on formulations and meanings of variables and terms, please see Section 3 of the report.\n",
    "\n",
    "Alternatively, the same content can be interactively viewed through the MATLAB live script also included. \n",
    "\n",
    "### Dataset\n",
    "For easy visualisation, we will $m=16$ consider  data points, with only $n=2$ features. The first class of points (labelled as $+1$) will be lie within a square of size $2$ centred around the point $(2,2)$, whereas the second class of points (labelled as $-1$) will lie within a square of size $2$ centred at $(3,3)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "format short\n",
    "\n",
    "m = 16;\n",
    "\n",
    "x = [2*rand(8,2) + 2;\n",
    "     2*rand(8,2) + 3];\n",
    "y = [ones(8,1);\n",
    "    -ones(8,1)];\n",
    "\n",
    "scatter(x(1:8,1),x(1:8,2),'ro')\n",
    "hold on\n",
    "scatter(x(9:end,1),x(9:end,2),'b^')\n",
    "hold off"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, this data is not linearly separable, and so our soft-margin models are required. Below we implement some simple helper functions for visualising our solutions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created file 'c:\\Users\\Daniel\\Desktop\\Uni\\Postgrad\\1st Year\\Term 2\\COMP9417\\Project\\COMP9417-Project-Robust-SVMS-and-Breast-Cancer-Classification\\visualise.m'.\n"
     ]
    }
   ],
   "source": [
    "%%file visualise.m\n",
    "\n",
    "function [] = visualise(m,x,y,w,gamma,sv)\n",
    "    for i=1:m\n",
    "        if y(i) == 1\n",
    "            if isempty(sv(sv==i))\n",
    "                scatter(x(i,1),x(i,2),'rx')\n",
    "                hold on\n",
    "            else\n",
    "                scatter(x(i,1),x(i,2),'gx')\n",
    "                hold on\n",
    "            end\n",
    "        else\n",
    "            if isempty(sv(sv==i))\n",
    "                scatter(x(i,1),x(i,2),'b^')\n",
    "                hold on\n",
    "            else\n",
    "                scatter(x(i,1),x(i,2),'g^')\n",
    "                hold on\n",
    "            end\n",
    "        end\n",
    "    end\n",
    "    fimplicit(@(X,Y) w(1)*X + w(2)*Y - gamma, 'r-')\n",
    "    hold on\n",
    "    fimplicit(@(X,Y) w(1)*X + w(2)*Y - gamma - 1, 'b--')\n",
    "    hold on\n",
    "    fimplicit(@(X,Y) w(1)*X + w(2)*Y - gamma + 1, 'b--')\n",
    "    xlim([1,5])\n",
    "    ylim([1,5])\n",
    "    axis equal\n",
    "    hold off\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created file 'c:\\Users\\Daniel\\Desktop\\Uni\\Postgrad\\1st Year\\Term 2\\COMP9417\\Project\\COMP9417-Project-Robust-SVMS-and-Breast-Cancer-Classification\\visualise_robust.m'.\n"
     ]
    }
   ],
   "source": [
    "%%file visualise_robust.m\n",
    "\n",
    "function [] = visualise_robust(m,x,y,w,gamma,sv,r)\n",
    "    %also includes uncertainty regions\n",
    "    thetas = linspace(-pi,pi,50);\n",
    "    for i=1:m\n",
    "        circle_x = r(i)*cos(thetas)+x(i,1);\n",
    "        circle_y = r(i)*sin(thetas)+x(i,2);\n",
    "        plot(circle_x,circle_y,'k--')\n",
    "        hold on\n",
    "    end\n",
    "    visualise(m,x,y,w,gamma,sv)\n",
    "    hold off\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 1. Standard SVM\n",
    "\n",
    "The standard SVM is formulated as a quadratic program in dual form:\n",
    "$$ \\min_{u\\in\\mathbb{R}^m}\\quad \\frac{1}{2} u^TYXX^TY^Tu - e^Tu \\quad\\mbox{subject to}\\quad e^TY^Tu = 0,\\quad 0\\leq u\\leq \\lambda e$$\n",
    "\n",
    "Below we create a function that takes as input, the data points $x$, their classification $y$ and the regularization parameter $\\lambda$, then solves the above optimisation problem, and returns the weights $w$ and the bias $\\gamma$, as well as an array $sv$ of indices that indicate the support vectors. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created file 'c:\\Users\\Daniel\\Desktop\\Uni\\Postgrad\\1st Year\\Term 2\\COMP9417\\Project\\COMP9417-Project-Robust-SVMS-and-Breast-Cancer-Classification\\standard_svm.m'.\n"
     ]
    }
   ],
   "source": [
    "%%file standard_svm.m\n",
    "\n",
    "function [w,gamma,sv] = standard_svm(x,y,lambda)    \n",
    "    %define parameters in desired form\n",
    "    m = size(x,1); \n",
    "    Y = diag(y);\n",
    "    X = x;\n",
    "    e = ones(m,1);\n",
    "    \n",
    "    %define problem variables\n",
    "    u = sdpvar(m,1);\n",
    "    \n",
    "    %objective function\n",
    "    Obj = 0.5*u'*Y*(X*X')*Y'*u - e'*u;\n",
    "    \n",
    "    %constraints\n",
    "    C = [e'*Y'*u == 0; u >= 0; u <= lambda*e];\n",
    "    \n",
    "    %solve\n",
    "    optimize(C, Obj, sdpsettings('solver','mosek','verbose',0));\n",
    "    \n",
    "    %extract solution\n",
    "    u = value(u);\n",
    "    sv = [];\n",
    "    for i =1:m\n",
    "        if u(i) > 5*1e-8 && u(i) < lambda-5*(1e-8) %support vector, allowing for computer error\n",
    "            sv = [sv i];\n",
    "        end\n",
    "    end\n",
    "    if isempty(sv)\n",
    "        error('No solution found. Please adjust tuning parameter. ')\n",
    "    end\n",
    "    w = X'*Y'*u;\n",
    "    [~, I] = sort(u(sv),'ascend');\n",
    "    new_sv = sv(I);\n",
    "    ind = new_sv(ceil(end/2),2);\n",
    "    gamma = -(1 - y(ind)*w'*x(ind,:)')/y(ind);\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "w =\n",
      "\n",
      "   -0.9221\n",
      "   -1.0298\n",
      "\n",
      "\n",
      "gamma =\n",
      "\n",
      "   -6.5698\n",
      "\n",
      "\n",
      "sv =\n",
      "\n",
      "     3     5     6    11    12\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "[w, gamma, sv] = standard_svm(x,y,0.8) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can visualise the solution as follows: the green points are support vectors; the red line is our classifier; the dotted blue lines are our margins. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualise(m,x,y,w,gamma,sv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Matlab",
   "language": "matlab",
   "name": "matlab"
  },
  "language_info": {
   "codemirror_mode": "octave",
   "file_extension": ".m",
   "help_links": [
    {
     "text": "MetaKernel Magics",
     "url": "https://metakernel.readthedocs.io/en/latest/source/README.html"
    }
   ],
   "mimetype": "text/x-octave",
   "name": "matlab",
   "version": "0.16.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
